# GitLab CI configuration for go-dcgm
# Uses Docker for building and testing based on the existing Dockerfile

# Define the stages of the pipeline
stages:
  - build
  - test

# Define global variables
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Build arguments for the Dockerfile
  CUDA_VERSION: "12.5.1"
  DISTRO_FLAVOR: "ubuntu24.04"
  GO_VERSION: "1.24.4"
  DCGM_VERSION: "4.2.3-2"
  # Image names
  BUILD_IMAGE: "$CI_REGISTRY_IMAGE/build:$CI_COMMIT_SHA"
  TEST_IMAGE: "$CI_REGISTRY_IMAGE/test:$CI_COMMIT_SHA"

# Use Docker-in-Docker service
services:
  - docker:dind

# Use Docker image
image: docker:latest

before_script:
  - docker info
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# Build Docker image and compile Go code
build:
  stage: build
  script:
    - echo "Building Docker image with go-dcgm..."
    # Build the samples stage which includes the compiled binaries
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build
        --target samples
        --build-arg CUDA_VERSION=$CUDA_VERSION
        --build-arg DISTRO_FLAVOR=$DISTRO_FLAVOR
        --build-arg GO_VERSION=$GO_VERSION
        --build-arg DCGM_VERSION=$DCGM_VERSION
        --tag $BUILD_IMAGE
        .
    # Push the built image for use in test stage
    - docker push $BUILD_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Run tests inside the built Docker container
test:
  stage: test
  tags:
    - docker
    - gpu-enabled
  image: $BUILD_IMAGE
  needs: ["build"]
  before_script: []
  script:
    # Create test reports directory
    - mkdir -p test-reports
    - echo '=== Installing test dependencies ==='
    - go install github.com/jstemmer/go-junit-report/v2@latest
    - echo '=== Running Go tests ==='
    - mkdir -p test-reports
    - >
      go test -v ./tests 2>&1
      | /root/go/bin/go-junit-report -set-exit-code
      > test-reports/go-tests.xml &&
    - echo '=== Tests completed successfully! ==='
  artifacts:
    reports:
      junit:
        - test-reports/go-tests.xml
    paths:
      - test-reports/
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Run race tests inside the built Docker container
test-race:
  stage: test
  tags:
    - docker
    - gpu-enabled
  image: $BUILD_IMAGE
  needs: ["build"]
  before_script: []
  script:
    # Create test reports directory
    - mkdir -p test-reports
    - echo '=== Installing test dependencies ==='
    - go install github.com/jstemmer/go-junit-report/v2@latest
    - echo '=== Running Go race tests ==='
    - mkdir -p test-reports
    - >
      go test -race -v ./tests 2>&1
      | /root/go/bin/go-junit-report -set-exit-code
      > test-reports/go-race-tests.xml
    - echo '=== Race Tests completed successfully! ==='
  artifacts:
    reports:
      junit:
        - test-reports/go-race-tests.xml
    paths:
      - test-reports/
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Code format check inside Docker
format-check:
  stage: test
  needs: ["build"]
  before_script: []
  tags:
    - docker
    - gpu-disabled
  image: $BUILD_IMAGE
  script:
    - echo "Checking code format in Docker container..."
    # Install gofumpt
    - echo 'Installing gofumpt...'
    - go install mvdan.cc/gofumpt@latest
    # Run format check
    - echo 'Checking code format...'
    - make check-format
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.go:
  tags:
    - docker
    - gpu-disabled
  image: golang

# Full linting inside Docker (optional)
lint-full:
  extends:
    - .go
  stage: test
  before_script: []
  needs: ["build"]
  script:
    - echo "Running full linting..."
    # Install golangci-lint and run full linting
    - echo 'Installing golangci-lint...'
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s v2.1.6
    - echo 'Running full linting...'
    - ./bin/golangci-lint run ./... --timeout 10m --fix
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  allow_failure: true

# Build matrix for different configurations (optional)
build-matrix:
  stage: build
  script:
    - echo "Building Docker images with docker-bake for matrix configurations..."
    - docker context create go-dcgm
    - docker buildx create --use go-dcgm
    - docker buildx bake --load
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
